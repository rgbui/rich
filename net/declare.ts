
import { TableSchema } from "../blocks/data-grid/schema/meta";
import { LinkPageItem, LinkWs } from "../src/page/declare";
import { GalleryType, OuterPic } from "../extensions/image/declare";
import { StatusCode } from "./status.code";
import { UserAction } from "../src/history/action";
import { RobotInfo, UserBasic, UserStatus } from "../types/user";
import { ResourceArguments } from "../extensions/icon/declare";
import { PayFeatureCheck } from "../component/pay";
import { AtomPermission } from "../src/page/permission";
import { WsConsumeType } from "./ai/cost";
export type SockResponse<T, U = string> = {
	/**
	 * 返回状态码
	 */
	code?: StatusCode,
	/**
	 * 表示当前的是否处理正常
	 * 通常200~300表示正常处理
	 * 大于300小于500表示处理不正常，
	 * 500 seriver happend error
	 * 返回值是用来提醒处理异常原因的
	 */
	ok?: boolean,
	data?: T,
	warn?: U
}
export interface ChannelSyncMapUrls {
	"/log": { args: (r: { type: "error" | "warn" | "info", message: string | Error }) => void, returnType: void },
	"/page/update/info": { args: (r: { id?: string, elementUrl?: string, pageInfo: LinkPageItem }) => void, returnType: void },
	"/page/open": { args: (r: { item?: string | { id: string }, elementUrl?: string, config?: { isTemplate?: boolean, wait?: boolean, blockId?: string, force?: boolean, initData?: Record<string, any>, isCanEdit?: boolean } }) => void, returnType: void },
	"/page/dialog": { args: (r: { elementUrl: string, config?: { isTemplate?: boolean, wait?: boolean, blockId?: string, force?: boolean, initData?: Record<string, any>, isCanEdit?: boolean } }) => any, returnType: void },
	"/page/slide": { args: (r: { elementUrl: string, config?: { isTemplate?: boolean, wait?: boolean, blockId?: string, force?: boolean, initData?: Record<string, any>, isCanEdit?: boolean } }) => any, returnType: void },
	"/page/notify/toggle": { args: (r: { id: string, visible: boolean }) => void, returnType: void },
	"/page/remove": { args: (r: { item: string | { id: string } }) => void, returnType: void },
	"/update/user": { args: (r: { user: Record<string, any> }) => void, returnType: void },
	"/page/create/sub": { args: (r: { pageId: string, text: string }) => LinkPageItem, returnType: void },
	"/user/basic/sync": { args: (r: { id: string }) => void, returnType: void },
	"/user/onlines": { args: (r: { users: Set<string> }) => void, returnType: void },
	"/user/view/onlines": { args: (r: { viewUrl: string, users: Set<string> }) => void, returnType: void },
	"/robot/open": { args: (r: { robot: RobotInfo }) => Promise<void>, returnType: void },
	"/ws/channel/notify": { args: (r: { id: string, workspaceId: string, roomId: string }) => void, returnType: void },
	"/ws/channel/patch/notify": { args: (r: { workspaceId: string, roomId: string, content: string, file: any, isEdited: boolean }) => void, returnType: void },
	"/ws/channel/deleted/notify": { args: (r: { workspaceId: string, id: string, roomId: string }) => void, returnType: void },
	"/ws/channel/emoji/notify": { args: (r: { workspaceId: string, id: string, roomId: string, emoji: { emojiId: string, code?: string } }) => void, returnType: void },
	"/ws/view/operate/notify": { args: (r: { id: string, directive: number, operators: any[], elementUrl: string, workspaceId: string, userid: string }) => void, returnType: void },
	"/ws/page/item/operate/notify": { args: (r: { id: string, workspaceId: string, roomId: string }) => void, returnType: void },
	"/ws/datagrid/schema/operate/notify": { args: (r: { id: string, workspaceId: string, roomId: string }) => void, returnType: void }
}
export interface ChannelOnlyMapUrls {
	"/log": { args: (r: { type: "error" | "warn" | "info", message: string | Error }) => void, returnType: void },
	"/page/update/info": { args: (r: { id?: string, elementUrl?: string, pageInfo: LinkPageItem }) => void, returnType: void },
	"/page/open": { args: (r: { item?: string | { id: string }, elementUrl?: string, config?: { isTemplate?: boolean, wait?: boolean, blockId?: string, force?: boolean, initData?: Record<string, any>, isCanEdit?: boolean } }) => void, returnType: void },
	"/page/dialog": { args: (r: { elementUrl: string, config?: { isTemplate?: boolean, wait?: boolean, blockId?: string, force?: boolean, initData?: Record<string, any>, isCanEdit?: boolean } }) => any, returnType: void },
	"/page/slide": { args: (r: { elementUrl: string, config?: { isTemplate?: boolean, wait?: boolean, blockId?: string, force?: boolean, initData?: Record<string, any>, isCanEdit?: boolean } }) => any, returnType: void },
	"/page/notify/toggle": { args: (r: { id: string, visible: boolean }) => void, returnType: void },
	"/page/remove": { args: (r: { item: string | { id: string } }) => void, returnType: void },
	"/update/user": { args: (r: { user: Record<string, any> }) => void, returnType: void },
	"/page/create/sub": { args: (r: { pageId: string, text: string }) => LinkPageItem, returnType: void },
	"/user/basic/sync": { args: (r: { id: string }) => void, returnType: void },
	"/user/onlines": { args: (r: { users: Set<string> }) => void, returnType: void },
	"/user/view/onlines": { args: (r: { viewUrl: string, users: Set<string> }) => void, returnType: void },
	"/robot/open": { args: (r: { robot: RobotInfo }) => Promise<void>, returnType: void },
	"/ws/channel/notify": { args: (r: { id: string, workspaceId: string, roomId: string }) => void, returnType: void },
	"/ws/channel/patch/notify": { args: (r: { workspaceId: string, roomId: string, content: string, file: any, isEdited: boolean }) => void, returnType: void },
	"/ws/channel/deleted/notify": { args: (r: { workspaceId: string, id: string, roomId: string }) => void, returnType: void },
	"/ws/channel/emoji/notify": { args: (r: { workspaceId: string, id: string, roomId: string, emoji: { emojiId: string, code?: string } }) => void, returnType: void },
	"/ws/view/operate/notify": { args: (r: { id: string, directive: number, operators: any[], elementUrl: string, workspaceId: string, userid: string }) => void, returnType: void },
	"/ws/page/item/operate/notify": { args: (r: { id: string, workspaceId: string, roomId: string }) => void, returnType: void },
	"/ws/datagrid/schema/operate/notify": { args: (r: { id: string, workspaceId: string, roomId: string }) => void, returnType: void }
}
export interface ChannelOnceMapUrls {
	"/log": { args: (r: { type: "error" | "warn" | "info", message: string | Error }) => void, returnType: void },
	"/page/update/info": { args: (r: { id?: string, elementUrl?: string, pageInfo: LinkPageItem }) => void, returnType: void },
	"/page/open": { args: (r: { item?: string | { id: string }, elementUrl?: string, config?: { isTemplate?: boolean, wait?: boolean, blockId?: string, force?: boolean, initData?: Record<string, any>, isCanEdit?: boolean } }) => void, returnType: void },
	"/page/dialog": { args: (r: { elementUrl: string, config?: { isTemplate?: boolean, wait?: boolean, blockId?: string, force?: boolean, initData?: Record<string, any>, isCanEdit?: boolean } }) => any, returnType: void },
	"/page/slide": { args: (r: { elementUrl: string, config?: { isTemplate?: boolean, wait?: boolean, blockId?: string, force?: boolean, initData?: Record<string, any>, isCanEdit?: boolean } }) => any, returnType: void },
	"/page/notify/toggle": { args: (r: { id: string, visible: boolean }) => void, returnType: void },
	"/page/remove": { args: (r: { item: string | { id: string } }) => void, returnType: void },
	"/update/user": { args: (r: { user: Record<string, any> }) => void, returnType: void },
	"/page/create/sub": { args: (r: { pageId: string, text: string }) => LinkPageItem, returnType: void },
	"/user/basic/sync": { args: (r: { id: string }) => void, returnType: void },
	"/user/onlines": { args: (r: { users: Set<string> }) => void, returnType: void },
	"/user/view/onlines": { args: (r: { viewUrl: string, users: Set<string> }) => void, returnType: void },
	"/robot/open": { args: (r: { robot: RobotInfo }) => Promise<void>, returnType: void },
	"/ws/channel/notify": { args: (r: { id: string, workspaceId: string, roomId: string }) => void, returnType: void },
	"/ws/channel/patch/notify": { args: (r: { workspaceId: string, roomId: string, content: string, file: any, isEdited: boolean }) => void, returnType: void },
	"/ws/channel/deleted/notify": { args: (r: { workspaceId: string, id: string, roomId: string }) => void, returnType: void },
	"/ws/channel/emoji/notify": { args: (r: { workspaceId: string, id: string, roomId: string, emoji: { emojiId: string, code?: string } }) => void, returnType: void },
	"/ws/view/operate/notify": { args: (r: { id: string, directive: number, operators: any[], elementUrl: string, workspaceId: string, userid: string }) => void, returnType: void },
	"/ws/page/item/operate/notify": { args: (r: { id: string, workspaceId: string, roomId: string }) => void, returnType: void },
	"/ws/datagrid/schema/operate/notify": { args: (r: { id: string, workspaceId: string, roomId: string }) => void, returnType: void }
}
export interface ChannelOffMapUrls {
	"/log": { args: (r: { type: "error" | "warn" | "info", message: string | Error }) => void, returnType: void },
	"/page/update/info": { args: (r: { id?: string, elementUrl?: string, pageInfo: LinkPageItem }) => void, returnType: void },
	"/page/open": { args: (r: { item?: string | { id: string }, elementUrl?: string, config?: { isTemplate?: boolean, wait?: boolean, blockId?: string, force?: boolean, initData?: Record<string, any>, isCanEdit?: boolean } }) => void, returnType: void },
	"/page/dialog": { args: (r: { elementUrl: string, config?: { isTemplate?: boolean, wait?: boolean, blockId?: string, force?: boolean, initData?: Record<string, any>, isCanEdit?: boolean } }) => any, returnType: void },
	"/page/slide": { args: (r: { elementUrl: string, config?: { isTemplate?: boolean, wait?: boolean, blockId?: string, force?: boolean, initData?: Record<string, any>, isCanEdit?: boolean } }) => any, returnType: void },
	"/page/notify/toggle": { args: (r: { id: string, visible: boolean }) => void, returnType: void },
	"/page/remove": { args: (r: { item: string | { id: string } }) => void, returnType: void },
	"/update/user": { args: (r: { user: Record<string, any> }) => void, returnType: void },
	"/page/create/sub": { args: (r: { pageId: string, text: string }) => LinkPageItem, returnType: void },
	"/user/basic/sync": { args: (r: { id: string }) => void, returnType: void },
	"/user/onlines": { args: (r: { users: Set<string> }) => void, returnType: void },
	"/user/view/onlines": { args: (r: { viewUrl: string, users: Set<string> }) => void, returnType: void },
	"/robot/open": { args: (r: { robot: RobotInfo }) => Promise<void>, returnType: void },
	"/ws/channel/notify": { args: (r: { id: string, workspaceId: string, roomId: string }) => void, returnType: void },
	"/ws/channel/patch/notify": { args: (r: { workspaceId: string, roomId: string, content: string, file: any, isEdited: boolean }) => void, returnType: void },
	"/ws/channel/deleted/notify": { args: (r: { workspaceId: string, id: string, roomId: string }) => void, returnType: void },
	"/ws/channel/emoji/notify": { args: (r: { workspaceId: string, id: string, roomId: string, emoji: { emojiId: string, code?: string } }) => void, returnType: void },
	"/ws/view/operate/notify": { args: (r: { id: string, directive: number, operators: any[], elementUrl: string, workspaceId: string, userid: string }) => void, returnType: void },
	"/ws/page/item/operate/notify": { args: (r: { id: string, workspaceId: string, roomId: string }) => void, returnType: void },
	"/ws/datagrid/schema/operate/notify": { args: (r: { id: string, workspaceId: string, roomId: string }) => void, returnType: void }
}
export interface ChannelFireMapUrls {
	"/log": { args: { type: "error" | "warn" | "info", message: string | Error }, returnType: void },
	"/page/update/info": { args: { id?: string, elementUrl?: string, pageInfo: LinkPageItem }, returnType: void },
	"/page/open": { args: { item?: string | { id: string }, elementUrl?: string, config?: { isTemplate?: boolean, wait?: boolean, blockId?: string, force?: boolean, initData?: Record<string, any>, isCanEdit?: boolean } }, returnType: void },
	"/page/dialog": { args: { elementUrl: string, config?: { isTemplate?: boolean, wait?: boolean, blockId?: string, force?: boolean, initData?: Record<string, any>, isCanEdit?: boolean } }, returnType: any },
	"/page/slide": { args: { elementUrl: string, config?: { isTemplate?: boolean, wait?: boolean, blockId?: string, force?: boolean, initData?: Record<string, any>, isCanEdit?: boolean } }, returnType: any },
	"/page/notify/toggle": { args: { id: string, visible: boolean }, returnType: void },
	"/page/remove": { args: { item: string | { id: string } }, returnType: void },
	"/update/user": { args: { user: Record<string, any> }, returnType: void },
	"/page/create/sub": { args: { pageId: string, text: string }, returnType: LinkPageItem },
	"/user/basic/sync": { args: { id: string }, returnType: void },
	"/user/onlines": { args: { users: Set<string> }, returnType: void },
	"/user/view/onlines": { args: { viewUrl: string, users: Set<string> }, returnType: void },
	"/robot/open": { args: { robot: RobotInfo }, returnType: Promise<void> },
	"/ws/channel/notify": { args: { id: string, workspaceId: string, roomId: string }, returnType: void },
	"/ws/channel/patch/notify": { args: { workspaceId: string, roomId: string, content: string, file: any, isEdited: boolean }, returnType: void },
	"/ws/channel/deleted/notify": { args: { workspaceId: string, id: string, roomId: string }, returnType: void },
	"/ws/channel/emoji/notify": { args: { workspaceId: string, id: string, roomId: string, emoji: { emojiId: string, code?: string } }, returnType: void },
	"/ws/view/operate/notify": { args: { id: string, directive: number, operators: any[], elementUrl: string, workspaceId: string, userid: string }, returnType: void },
	"/ws/page/item/operate/notify": { args: { id: string, workspaceId: string, roomId: string }, returnType: void },
	"/ws/datagrid/schema/operate/notify": { args: { id: string, workspaceId: string, roomId: string }, returnType: void }
}
export interface ChannelDelMapUrls {
	"/schema/delete": { args: { wsId?: string, id: string }, returnType: Promise<SockResponse<void>> },
	"/datastore/remove": { args: { schemaId: string, dataId: string }, returnType: Promise<{ ok: boolean, warn: string }> },
	"/datastore/remove/ids": { args: { schemaId: string, ids: string[] }, returnType: Promise<SockResponse<void>> },
	"/datastore/remove/filter": { args: { schemaId: string, filter: Record<string, any> }, returnType: Promise<SockResponse<void>> },
	"/user/channel/delete": { args: { id: string }, returnType: Promise<SockResponse<void>> },
	"/user/write/off": { args: { sn: number }, returnType: Promise<SockResponse<void>> },
	"/user/exit/ws": { args: { wsId: string }, returnType: Promise<SockResponse<void>> },
	"/friend/delete": { args: { id: string }, returnType: Promise<SockResponse<void>> },
	"/user/blacklist/delete": { args: { id: string }, returnType: Promise<SockResponse<void>> },
	"/user/chat/cancel": { args: { id: string, roomId: string }, returnType: Promise<SockResponse<void>> },
	"/user/del/order": { args: { orderId: string }, returnType: Promise<SockResponse<void>> },
	"/open/weixin/unbind": { args: { id: string }, returnType: Promise<SockResponse<void>> },
	"/ws/channel/cancel": { args: { roomId: string, id: string, wsId?: string, sockId?: string }, returnType: Promise<SockResponse<void>> },
	"/ws/member/exit": { args: { wsId?: string }, returnType: Promise<SockResponse<void>> },
	"/ws/member/delete": { args: { userid: string }, returnType: Promise<SockResponse<void>> },
	"/ws/role/delete": { args: { roleId: string }, returnType: Promise<SockResponse<void>> },
	"/ws/comment/del": { args: { id: string }, returnType: Promise<SockResponse<void>> },
	"/del/workspace/template": { args: { id: string }, returnType: Promise<SockResponse<void>> },
	"/page/deleted/clean": { args: { ws?: LinkWs, wsId?: string, pageId: string }, returnType: Promise<SockResponse<void>> },
	"/view/snap/del": { args: { id: string }, returnType: Promise<SockResponse<void>> }
}
export interface ChannelPostMapUrls {
	"/download/file": { args: { url: string }, returnType: Promise<SockResponse<{ file: ResourceArguments }>> },
	"/clone/page": { args: { pageId: string, text?: string, parentId?: string, downPageId?: string }, returnType: Promise<SockResponse<{ items: LinkPageItem[] }>> },
	"/phone/sms/code": { args: { phone: string }, returnType: Promise<{ ok: boolean, warn: string, data: { success: boolean, code?: string } }> },
	"/email/send/code": { args: { email: string }, returnType: Promise<SockResponse<{ code?: string }>> },
	"/user/upload/file": { args: { file: File, uploadProgress: (event: ProgressEvent) => void }, returnType: Promise<SockResponse<{ file: { url: string } }>> },
	"/robot/doc/embedding": { args: { id: string }, returnType: Promise<SockResponse<{ totalCount: number }>> },
	"/text/ai": { args: { input: string, model?: WsConsumeType, uid?: string, options?: { isSession?: boolean, sessionTimeOut?: number, parameters?: Record<string, any> } }, returnType: Promise<SockResponse<{ message: string }>> },
	"/text/ai/stream": { args: { question: string, role?: string, model?: WsConsumeType, uid?: string, options?: Record<string, any>, callback: (str: string, done?: boolean, controller?: AbortController) => void }, returnType: Promise<SockResponse<void>> },
	"/text/edit": { args: { code: boolean, input: string, question: string, options: any }, returnType: Promise<SockResponse<{ content: string }>> },
	"/text/to/image": { args: { prompt: string, model?: WsConsumeType, options: Record<string, any> }, returnType: Promise<SockResponse<{ file: Record<string, any> }>> },
	"/fetch": { args: { url: string, data?: Record<string, any>, method: string, callback: (chunk: any, done?: boolean) => void }, returnType: Promise<void> },
	"/http": { args: { url: string; data?: Record<string, any>; method: string; }, returnType: Promise<SockResponse<any>> },
	"/ws/upload/file": { args: { file: File, data?: { fileClassify: "cover" }, uploadProgress: (event: ProgressEvent) => void }, returnType: Promise<SockResponse<{ file: { url: string, name: string, size: number } }>> },
	"/ws/download/url": { args: { url: string }, returnType: Promise<SockResponse<{ file: { url: string, name: string, size: number } }>> },
	"/create/template": { args: { wsId?: string, config?: { pageId?: string, dataGridMaxRecordCount?: number } }, returnType: Promise<SockResponse<{ file: ResourceArguments }>> },
	"/create/workspace/template": { args: { config?: Record<string, any>, file: ResourceArguments, wsId: string, pageId?: string, elementUrl: string, templateUrl: string, text?: string, icon?: any, description?: string, type: "workspace" | "dir" | "page" }, returnType: Promise<SockResponse<void>> },
	"/page/item/recover": { args: { ws?: LinkWs, wsId?: string, parentId: string, pageId: string }, returnType: Promise<SockResponse<void>> },
	"/view/snap/rollup": { args: { id: string, elementUrl: string, wsId?: string, bakeTitle?: string, pageTitle?: string }, returnType: Promise<SockResponse<{ seq: number, id: string }>> },
	"/row/block/sync/refs": { args: { ws: LinkWs, wsId?: string, pageId?: string, operators: any[] }, returnType: Promise<SockResponse<{ results: { id: string, error?: string }[] }>> },
	"/screenshot/png": { args: { wsId?: string, text?: string, url: string }, returnType: Promise<SockResponse<{ file: ResourceArguments }>> },
	"/screenshot/pdf": { args: { wsId?: string, text?: string, url: string }, returnType: Promise<SockResponse<{ file: ResourceArguments }>> },
	"/workspace/template/useCount": { args: { id: string }, returnType: Promise<SockResponse<void>> },
	"/import/page": { args: { text?: string, templateUrl?: string, wsId?: string, parentId?: string, pageId?: string, }, returnType: Promise<SockResponse<{ item: any, items: any[] }>> }
}
export interface ChannelPatchMapUrls {
	"/datastore/update": { args: { schemaId: string, dataId: string, data: Record<string, any> }, returnType: Promise<SockResponse<void>> },
	"/datastore/row/update": { args: { ws: LinkWs, wsId?: string, schemaId: string, filter?: Record<string, any>, data: Record<string, any> }, returnType: Promise<SockResponse<void>> },
	"/sign/patch": { args: { name: string, paw: string }, returnType: Promise<SockResponse<{ list: any[] }>> },
	"/phone/check/update": { args: { phone: string, code: string }, returnType: Promise<SockResponse<void>> },
	"/email/check/update": { args: { email: string, code: string }, returnType: Promise<SockResponse<void>> },
	"/user/set/paw": { args: { oldPaw?: string, newPaw: string, confirmPaw: string }, returnType: Promise<SockResponse<void>> },
	"/user/patch": { args: { data: Record<string, any> }, returnType: Promise<SockResponse<void>> },
	"/user/patch/status": { args: { status: UserStatus, customStatus?: { overDue: Date, text: string } }, returnType: Promise<SockResponse<void>> },
	"/user/channel/active": { args: { id: string }, returnType: Promise<SockResponse<void>> },
	"/user/chat/patch": { args: { id: string, roomId: string, content?: string, file?: any }, returnType: Promise<SockResponse<void>> },
	"/ws/patch": { args: { wsId?: string, sockId?: string, data: Record<string, any> }, returnType: Promise<SockResponse<void>> },
	"/ws/channel/patch": { args: { id: string, sockId?: string, wsId?: string, roomId: string, content?: string, replyId?: string, files?: any[], isEdited?: boolean }, returnType: Promise<SockResponse<void>> },
	"/ws/role/patch": { args: { roleId: string, data: Record<string, any> }, returnType: Promise<SockResponse<void>> },
	"/ws/set/domain": { args: { wsId?: string, domain: string }, returnType: Promise<SockResponse<{ exists?: boolean, illegal?: boolean }>> },
	"/ws/patch/member/roles": { args: { wsId?: string, userid: string, roleIds: string[] }, returnType: Promise<SockResponse<void>> },
	"/view/snap/patch": { args: { id: string, data: Record<string, any> }, returnType: Promise<SockResponse<void>> },
	"/interactive/emoji": { args: { elementUrl: string, fieldName: string }, returnType: Promise<SockResponse<{ count: number, exists: boolean, otherCount?: number, otherId?: string, otherExists: boolean }>> }
}
export interface ChannelPutMapUrls {
	"/schema/create": { args: { text: string, wsId?: string, url: string }, returnType: Promise<SockResponse<{ schema: Partial<TableSchema> }>> },
	"/schema/create/define": { args: { text: string, wsId?: string, fields?: any[], views?: any[], datas?: any[] }, returnType: Promise<SockResponse<{ schema: Partial<TableSchema> }>> },
	"/schema/operate": { args: { operate: { operate?: string, schemaId: string, date?: Date, actions: any[] } }, returnType: Promise<SockResponse<{ actions: any[] }>> },
	"/datastore/add": { args: { schemaId: string, data: Record<string, any>, pos?: { id: string, pos: "before" | "after" } }, returnType: Promise<SockResponse<{ isCacSort: boolean, data: Record<string, any> }>> },
	"/datastore/batch/add": { args: { schemaId: string, list: any[] }, returnType: Promise<{ ok: boolean, data: { list: any[] }, warn: string }> },
	"/datastore/rank": { args: { schemaId: string, wsId?: string, id: string, pos: { id: string, pos: "before" | "after" } }, returnType: Promise<SockResponse<{ isCacSort: boolean, sort: number }>> },
	"/datastore/row/object/update": { args: { schemaId: string, rowId: string, fieldName: string, data: Record<string, any> }, returnType: Promise<SockResponse<void>> },
	"/device/sign": { args: any, returnType: Promise<void> },
	"/paw/sign": { args: { phone: string, paw: string, inviteCode: string, weixinOpen: Record<string, any> }, returnType: Promise<SockResponse<{ user: Record<string, any>, guid: string, token: string }>> },
	"/phone/sign": { args: { phone: string, code: string, inviteCode: string, weixinOpen: Record<string, any> }, returnType: Promise<SockResponse<{ user: Record<string, any>, guid: string, token: string }>> },
	"/user/channel/join": { args: { roomName?: string, userids: string[] }, returnType: Promise<SockResponse<{ room: Record<string, any>, channel: Record<string, any> }>> },
	"/user/join/ws": { args: { wsId: string }, returnType: Promise<SockResponse<void>> },
	"/sync/wiki/doc": { args: { wsId?: string, elementUrl: string, pageText: string, robotId: string, contents: { id: string, content: string }[] }, returnType: Promise<SockResponse<{ doc: { id: string } }>> },
	"/friend/join": { args: { userid?: string, sn?: number }, returnType: Promise<SockResponse<{ exists?: boolean, send?: boolean, refuse?: boolean, black?: boolean }>> },
	"/blacklist/join": { args: { otherId: string }, returnType: Promise<SockResponse<void>> },
	"/friend/agree": { args: { id: string }, returnType: Promise<SockResponse<{ userFriend: Record<string, any> }>> },
	"/user/chat/send": { args: { roomId: string, content?: string, files?: any, tos: string[], replyId?: string }, returnType: Promise<SockResponse<{ id: string, seq: number, createDate: Date }>> },
	"/user/chat/emoji": { args: { id: string, roomId: string, emoji: { emojiId: string, code?: string } }, returnType: Promise<SockResponse<{ emoji: { emojiId: string, code?: string, count: number } }>> },
	"/create/qr_pay/order": { args: { subject: string, body: string, price: number, count: number, amount?: number, kind: string }, returnType: Promise<SockResponse<{ orderId: string, code: string }>> },
	"/open/weixin/bind": { args: { weixinOpen: any }, returnType: Promise<SockResponse<void>> },
	"/open/sign": { args: {}, returnType: Promise<SockResponse<{ user: Record<string, any>, guid: string, token: string }>> },
	"/user/report": { args: { report: { userid: string, tags: string[], reason: string, reportElementUrl?: string, wsId?: string, reportContent?: string } }, returnType: Promise<SockResponse<void>> },
	"/ws/create": { args: { text: string, dataServiceAddress?: string, datasource?: "private-clound" | "public-clound" | "private-local", templateUrl?: string }, returnType: Promise<SockResponse<{ workspace: Record<string, any>, pids: any[] }>> },
	"/ws/invite/create": { args: any, returnType: Promise<SockResponse<{ code: string }>> },
	"/ws/invite/join": { args: { wsId: string, sock?: any, agree?: boolean, username: string }, returnType: Promise<SockResponse<void>> },
	"/ws/channel/send": { args: { sockId?: string, wsId?: string, roomId: string, content?: string, replyId?: string, files?: any[], mentions?: string[], robotId?: string, isRobotSend?: boolean, newLine?: boolean }, returnType: Promise<SockResponse<{ id: string, seq: number, createDate: Date }>> },
	"/ws/channel/emoji": { args: { elementUrl: string, sockId?: string, wsId?: string, emoji: { emojiId: string, code?: string } }, returnType: Promise<SockResponse<{ emoji: { emojiId: string, code?: string, count: number } }>> },
	"/ws/flow": { args: { ws: LinkWs, wsId?: string, flow: Record<string, any> }, returnType: Promise<SockResponse<{ flow: Record<string, any> }>> },
	"/ws/role/create": { args: { data: Record<string, any> }, returnType: Promise<SockResponse<{ role: Record<string, any> }>> },
	"/ws/comment/send": { args: { elementUrl: string, wsId?: string, parentId: string, rootId: string, content: string }, returnType: Promise<SockResponse<{ data: any }>> },
	"/ws/comment/emoji": { args: { wsId?: string, elementUrl: string }, returnType: Promise<SockResponse<{ count: number, exists?: boolean }>> },
	"/page/item/create": { args: { wsId?: string, data: Record<string, any> }, returnType: Promise<SockResponse<{ item: Record<string, any> }>> },
	"/view/snap/direct": { args: { wsId?: string, elementUrl: string, content: any, plain?: string, text?: string, thumb?: any }, returnType: Promise<Promise<void>> },
	"/bookmark/url": { args: { url: string }, returnType: Promise<SockResponse<{ title: string, description: string, image: ResourceArguments, icon: ResourceArguments }>> },
	"/tag/create": { args: { tag: string, wsId?: string }, returnType: Promise<SockResponse<{ id: string, tag: string, workspaceId: string, rootId: string, creater: string, createDate: Date }>> },
	"/import/page/data": { args: { text?: string, wsId?: string, parentId?: string, mime: number, pageData: Record<string, any> | string, plain?: string }, returnType: Promise<SockResponse<{ item: any }>> }
}
export interface ChannelGetMapUrls {
	"/gallery/query": { args: { type: GalleryType, word: string }, returnType: Promise<{ ok: boolean, data: OuterPic[], warn: string }> },
	"/page/query/info": { args: { ws?: LinkWs, sn?: number, id?: string, elementUrl?: string }, returnType: Promise<SockResponse<LinkPageItem>> },
	"/page/query/parents": { args: { ws?: LinkWs, id?: string, sn?: number }, returnType: Promise<SockResponse<{ items: LinkPageItem[] }>> },
	"/page/query/elementUrl": { args: { ws?: LinkWs, elementUrl?: string }, returnType: Promise<LinkPageItem> },
	"/page/allow": { args: { elementUrl: string }, returnType: Promise<Promise<{ isOwner?: boolean, isWs?: boolean, netPermissions?: AtomPermission[], item?: LinkPageItem, permissions?: AtomPermission[], memberPermissions?: { userid?: string, roleId?: string, permissions?: AtomPermission[] }[] }>> },
	"/schema/query": { args: { ws: LinkWs, wsId?: string, id: string }, returnType: Promise<{ ok: boolean, data: { schema: Partial<TableSchema> }, warn: string }> },
	"/schema/list": { args: { ws: LinkWs, wsId?: string, page?: number, size?: number }, returnType: Promise<SockResponse<{ total: number, list: Partial<TableSchema>[], page: number, size: number }>> },
	"/schema/ids/list": { args: { ws: LinkWs, wsId?: string, ids: string[] }, returnType: Promise<SockResponse<{ list: Partial<TableSchema>[] }>> },
	"/datastore/query": { args: { ws: LinkWs, wsId?: string, schemaId: string, id: string }, returnType: Promise<{ ok: boolean, data: { data: Record<string, any> }, warn: string }> },
	"/datastore/query/pre_next": { args: { ws: LinkWs, wsId?: string, schemaId: string, id: string }, returnType: Promise<{ ok: boolean, data: { data: Record<string, any>, prev: Record<string, any>, next: Record<string, any> }, warn: string }> },
	"/datastore/query/list": { args: { ws: LinkWs, wsId?: string, schemaId: string, page?: number, size?: number, filter?: Record<string, any>, sorts?: Record<string, 1 | -1>, projects?: string[], isIgnoreCount?: boolean }, returnType: Promise<{ ok: boolean, data: { list: any[], total: number, page: number, size: number }, warn: string }> },
	"/datastore/query/distinct": { args: { ws: LinkWs, wsId?: string, schemaId: string, field: string, filter?: Record<string, any> }, returnType: Promise<SockResponse<{ list: any[] }>> },
	"/datastore/query/ids": { args: { ws: LinkWs, wsId?: string, schemaId: string, ids: string[] }, returnType: Promise<{ ok: boolean, data: { list: any[] }, warn: string }> },
	"/datastore/query/all": { args: { ws: LinkWs, wsId?: string, schemaId: string, page?: number, size?: number, filter?: Record<string, any>, sorts?: Record<string, 1 | -1> }, returnType: Promise<{ ok: boolean, data: { list: any[], total: number, page: number, size: number }, warn: string }> },
	"/datastore/group": { args: { ws: LinkWs, wsId?: string, schemaId: string, page?: number, size?: number, filter?: Record<string, any>, sorts?: Record<string, 1 | -1>, group: string }, returnType: Promise<{ ok: boolean, data: { list: any[], total: number, page: number, size: number }, warn: string }> },
	"/datastore/statistics": { args: { ws: LinkWs, wsId?: string, schemaId: string, page?: number, size?: number, filter?: Record<string, any>, having?: Record<string, any>, sorts?: Record<string, 1 | -1>, groups: string[], aggregate?: Record<string, any> }, returnType: Promise<{ ok: boolean, data: { list: any[], total: number, page: number, size: number }, warn: string }> },
	"/datastore/statistics/value": { args: { ws: LinkWs, wsId?: string, schemaId: string, filter?: Record<string, any>, fieldName?: string, indicator?: string }, returnType: Promise<{ ok: boolean, data: { value?: number, total?: number }, warn: string }> },
	"/datastore/exists/user/submit": { args: { ws: LinkWs, wsId?: string, schemaId: string }, returnType: Promise<SockResponse<{ exists: boolean }>> },
	"/sign": { args: any, returnType: Promise<SockResponse<{ user: Record<string, any>, rk: string, uk: string, token: string }>> },
	"/sign/out": { args: any, returnType: Promise<SockResponse<void>> },
	"/phone/check/sign": { args: { phone: string }, returnType: Promise<{ ok: boolean, warn: string, data: { sign: boolean } }> },
	"/user/query": { args: any, returnType: Promise<SockResponse<{ user: Record<string, any> }>> },
	"/user/basic": { args: { userid: string }, returnType: Promise<SockResponse<{ user: UserBasic }>> },
	"/users/basic": { args: { ids: string[] }, returnType: Promise<SockResponse<{ list: UserBasic[] }>> },
	"/user/wss": { args: any, returnType: Promise<SockResponse<{ list: any[] }>> },
	"/user/channels": { args: { page?: number, size?: number }, returnType: Promise<SockResponse<{ list: any[], total: number, page: number, size: number, rooms: any[] }>> },
	"/user/channel/create": { args: { roomId: string }, returnType: Promise<SockResponse<{ channel: any, room: any }>> },
	"/user/word/query": { args: { word: string }, returnType: Promise<SockResponse<{ list: { id: string }[] }>> },
	"/friends": { args: { page?: number, size?: number }, returnType: Promise<SockResponse<{ list: any[], total: number, page: number, size: number }>> },
	"/friends/pending": { args: { page?: number, size?: number }, returnType: Promise<SockResponse<{ list: any[], total: number, page: number, size: number }>> },
	"/search/friends": { args: { name: string, size?: number }, returnType: Promise<SockResponse<{ list: UserBasic[], size: number }>> },
	"/search/friends/pending": { args: { name: string, size?: number }, returnType: Promise<SockResponse<{ list: UserBasic[], size: number }>> },
	"/search/blacklist": { args: { name: string, size?: number }, returnType: Promise<SockResponse<{ list: UserBasic[], size: number }>> },
	"/user/blacklist": { args: { page?: number, size?: number }, returnType: Promise<SockResponse<{ list: any[], total: number, page: number, size: number }>> },
	"/friend/is": { args: { friendId: string }, returnType: Promise<SockResponse<{ is: boolean }>> },
	"/user/chat/list": { args: { roomId: string, seq?: number, size?: number }, returnType: Promise<SockResponse<{ list: any[] }>> },
	"/user/room/unread": { args: { unrooms: { roomId: string, seq: number }[] }, returnType: Promise<SockResponse<{ unreads: { roomId: string, count: number }[] }>> },
	"/repeat/qr_pay/order": { args: { orderId: string, platform: string }, returnType: Promise<SockResponse<{ orderId: string, code: string }>> },
	"/user/order/list": { args: { page?: number, size?: number, word?: string, status?: string, deal?: boolean }, returnType: Promise<SockResponse<{ page: number, size: number, list: any[], total: number }>> },
	"/user/wallet": { args: {}, returnType: Promise<SockResponse<{ money: number, meal: string }>> },
	"/check/feature": { args: { type: PayFeatureCheck, config?: { fileSize?: number } }, returnType: Promise<SockResponse<{ warn: boolean, limit: boolean, wallet: { due: Date, oveDue: boolean, meal: string, money: number }, free: Record<string, any>, consume: Record<string, any> }>> },
	"/query/wiki/answer": { args: { ask: string, minRank?: number, model?: WsConsumeType, robotId: string, size?: number, contextSize?: number }, returnType: Promise<SockResponse<{ docs: { contentId: string, docId: string, ps: { at: number, content: string, contentId: string, rank: number }[] }[] }>> },
	"/text/embedding": { args: { text: string }, returnType: Promise<SockResponse<{ embedding: number[] }>> },
	"/open/list": { args: any, returnType: Promise<SockResponse<{ list: any[] }>> },
	"/ws/basic": { args: { name?: string, wsId?: string }, returnType: Promise<SockResponse<{ workspace: Record<string, any> }>> },
	"/ws/info": { args: { ws?: LinkWs, name?: string | number, wsId?: string }, returnType: Promise<SockResponse<{ workspace: Record<string, any> }>> },
	"/ws/access/info": { args: { wsId: string, pageId?: string, sock?: any }, returnType: Promise<SockResponse<{ roles: any[], member: Record<string, any>, page: any, onlineUsers: string[] }>> },
	"/ws/query": { args: { ws?: LinkWs, wsId?: string, name?: string }, returnType: Promise<SockResponse<{ workspace: Record<string, any>, pids: any[] }>> },
	"/ws/latest": { args: any, returnType: Promise<SockResponse<{ workspace: Record<string, any>, pids: any[] }>> },
	"/ws/invite/check": { args: { invite: string }, returnType: Promise<SockResponse<{ workspace: Record<string, any>, pids: any[] }>> },
	"/ws/files": { args: { ws?: LinkWs, wsId?: string, page?: number, size?: number, word?: string, mime?: "image" | "audio" | "video" | "unknow", fileClassify?: 'cover' | undefined }, returnType: Promise<SockResponse<{ list: ResourceArguments[], page: number, size: number, total: number }>> },
	"/ws/channel/list": { args: { ws: LinkWs, wsId?: string, roomId: string, seq?: number, page?: number, size?: number }, returnType: Promise<SockResponse<{ list: any[], unreadCount?: number }>> },
	"/ws/random/online/users": { args: { wsId: string, size?: number }, returnType: Promise<SockResponse<{ count: number, users: string[] }>> },
	"/ws/channel/abled/send": { args: { ws: LinkWs, wsId?: string, roomId: string }, returnType: Promise<SockResponse<{ abled: boolean }>> },
	"/ws/flow/get": { args: { flowId: string, ws: LinkWs, wsId?: string }, returnType: Promise<SockResponse<{ flow: Record<string, any> }>> },
	"/ws/member/word/query": { args: { ws: LinkWs, wsId?: string, word?: string, size?: number }, returnType: Promise<SockResponse<{ page: number, size: number, total: number, list: any[] }>> },
	"/ws/members": { args: { ws: LinkWs, wsId?: string, page: number, size: number, word?: string, roleId?: string }, returnType: Promise<SockResponse<{ page: number, size: number, total: number, list: any[] }>> },
	"/ws/is/member": { args: { sock?: any, wsId: string }, returnType: Promise<SockResponse<{ exists: boolean, workspace: Record<string, any> }>> },
	"/ws/roles": { args: { ws: LinkWs, wsId?: string, }, returnType: Promise<SockResponse<{ list: any[] }>> },
	"/ws/role/members": { args: { ws: LinkWs, wsId?: string, roleId: string, page: number, size: number, word?: string }, returnType: Promise<SockResponse<{ page: number, size: number, total: number, list: any[] }>> },
	"/ws/discovery": { args: { word?: string, page?: number, size?: number, type?: string }, returnType: Promise<SockResponse<{ page: number, size: number, total: number, list: any[] }>> },
	"/ws/view/online/users": { args: { viewUrl: string, read?: boolean }, returnType: Promise<SockResponse<{ users: string[] }>> },
	"/ws/online/users": { args: { wsId?: string }, returnType: Promise<SockResponse<{ users: string[] }>> },
	"/ws/create/object": { args: { wsId: string }, returnType: Promise<LinkWs> },
	"/ws/search": { args: { ws: LinkWs, wsId?: string, page?: number, size?: number, mime?: string, word: string, isOnlySearchTitle?: boolean, createDate?: number, editDate?: number }, returnType: Promise<SockResponse<{ pages: LinkPageItem[], list: { id: string, title: string, content: string, score: number }[], total: number }>> },
	"/ws/ai/search": { args: { ask: string, wsId?: string, minRank?: number, size?: number, contextSize?: number }, returnType: Promise<SockResponse<{ docs: { ps: ({ content: string } & { rank: number })[], elementUrl: string, blockId: string }[] }>> },
	"/ws/comment/list": { args: { ws: LinkWs, wsId?: string, elementUrl: string, parentId: string, sort: 'default' | 'date', page: number, size: number }, returnType: Promise<SockResponse<{ page: number, size: number, total: number, list: any[] }>> },
	"/ws/robots": { args: {}, returnType: Promise<SockResponse<{ list: { userid: string, name: string }[] }>> },
	"/robots/info": { args: { ids: string[] }, returnType: Promise<SockResponse<{ list: any[] }>> },
	"/get/robot": { args: { id: string }, returnType: Promise<SockResponse<{ robot: RobotInfo }>> },
	"/get/workspace/template": { args: { wsId: string, pageId?: string, elementUrl?: string }, returnType: Promise<SockResponse<{ template: Record<string, any> }>> },
	"/page/items": { args: { ws?: LinkWs, wsId?: string, ids: string[], sock?: any }, returnType: Promise<SockResponse<{ list: any[], favs: any[] }>> },
	"/page/item/subs": { args: { ws: LinkWs, wsId?: string, id: string }, returnType: Promise<SockResponse<{ list: any[] }>> },
	"/page/parent/ids": { args: { ws: LinkWs, wsId?: string, id: string }, returnType: Promise<SockResponse<{ parentIds: string[], exists: boolean }>> },
	"/page/parent/subs": { args: { ws: LinkWs, wsId?: string, parentIds: string[] }, returnType: Promise<SockResponse<{ list: any[] }>> },
	"/page/item": { args: { ws?: LinkWs, id?: string, sn?: number }, returnType: Promise<SockResponse<{ item: Record<string, any> }>> },
	"/page/word/query": { args: { ws: LinkWs, wsId?: string, word?: string, size?: number }, returnType: Promise<SockResponse<{ list: LinkPageItem[], total: number, page: number, size: number }>> },
	"/page/deleted/query": { args: { ws?: LinkWs, wsId?: string, word?: string, size?: number }, returnType: Promise<SockResponse<{ list: LinkPageItem[], total: number, page: number, size: number }>> },
	"/view/snap/query": { args: { ws: LinkWs, elementUrl: string }, returnType: Promise<SockResponse<{ content: string, operates: any[] }>> },
	"/view/snap/query/readonly": { args: { ws: LinkWs, wsId?: string, elementUrl: string }, returnType: Promise<SockResponse<{ content: string, operates: any[] }>> },
	"/view/snap/list": { args: { ws: LinkWs, wsId?: string, elementUrl: string, page: number, size: number }, returnType: Promise<SockResponse<{ list: any[], total: number, size: number, page: number }>> },
	"/view/snap/content": { args: { ws: LinkWs, wsId?: string, id: string }, returnType: Promise<SockResponse<{ id: string, content: string }>> },
	"/view/browse": { args: { elementUrl: string, ws: LinkWs, wsId?: string }, returnType: Promise<{ list: any[], page: number, size: number, total: number }> },
	"/get/page/refs": { args: { ws: LinkWs, wsId?: string, pageId: string, size?: number, desc?: boolean }, returnType: Promise<SockResponse<{ pages: LinkPageItem[], list: any[], total: number, size: number, page: number }>> },
	"/user/interactives": { args: { ws: LinkWs, wsId?: string, schemaId: string, ids: string[], es: string[] }, returnType: Promise<SockResponse<{ list: Record<string, string[]> }>> },
	"/get/tag/refs": { args: { ws: LinkWs, wsId?: string, tagId?: string, tag?: string, size?: number, desc?: boolean }, returnType: Promise<SockResponse<{ pages: LinkPageItem[], list: any[], total: number, size: number, page: number }>> },
	"/tag/word/query": { args: { word?: string, ws: LinkWs, wsId?: string, size?: number }, returnType: Promise<SockResponse<{ list: any[], total: number, size: number, page: number }>> },
	"/tag/query": { args: { ws: LinkWs, wsId?: string, id?: string, ids?: string[] }, returnType: Promise<SockResponse<{ list: any[], tag: any }>> },
	"/search/workspace/template": { args: { classify?: string, tags?: string[], mime?: string, page: number, word?: string, size: number }, returnType: Promise<SockResponse<{ page: number, list: any[], total: number, size: number }>> }
}
export interface ChannelQueryMapUrls {
	"/query/current/user": { args: any, returnType: UserBasic },
	"/current/page": { args: {}, returnType: LinkPageItem },
	"/cache/get": { args: { key: string }, returnType: Promise<any> },
	"/device/query": { args: any, returnType: Promise<string> },
	"/get/view/onlines": { args: { viewUrl: string }, returnType: { users: Set<string> } },
	"/amap/key_pair": { args: any, returnType: { key: string, pair: string } },
	"/ws/current/pages": { args: {}, returnType: LinkPageItem[] },
	"/guid": { args: any, returnType: string },
	"/query/my/wss": { args: {}, returnType: { wss: any[] } }
}

export interface ChannelActMapUrls {
	"/page/create/by_text": { args: { word: string }, returnType: SockResponse<LinkPageItem> },
	"/cache/set": { args: { key: string, value: any }, returnType: Promise<void> },
	"/open/user/settings": { args: {}, returnType: Promise<void> },
	"/open/workspace/settings": { args: {}, returnType: Promise<void> },
	"/user/logout": { args: {}, returnType: Promise<number> },
	"/view/snap/operator": { args: { elementUrl: string, operate: Partial<UserAction> }, returnType: Promise<{ seq: number, id: string; }> },
	"/view/snap/store": { args: { elementUrl: string, seq: number, content: any, plain?: string, text?: string, thumb?: any }, returnType: Promise<void> },
	"/open/pay": { args: {}, returnType: {} },
	"/shy/share": { args: { type: "weibo" | "weixin" | "updateTimelineShareData" | "updateAppMessageShareData", title: string, description?: string, pic?: string, url: string }, returnType: {} },
	"/user/exit/current/workspace": { args: {}, returnType: SockResponse<void> },
	"/current/ws/remove/member": { args: { userid: string }, returnType: SockResponse<void> },
	"/open/user/private/channel": { args: { userid: string }, returnType: SockResponse<void> },
	"/current/page/copy": { args: {}, returnType: SockResponse<void> },
	"/current/page/move": { args: {}, returnType: SockResponse<void> },
	"/workspace/mode": { args: { isApp: boolean }, returnType: SockResponse<void> }
}

export interface ChannelAirMapUrls {
	"/page/update/info": { args: { id?: string, elementUrl?: string, pageInfo: LinkPageItem }, returnType: void },
	"/page/open": { args: { item?: string | { id: string }, elementUrl?: string, config?: { isTemplate?: boolean, wait?: boolean, blockId?: string, force?: boolean, initData?: Record<string, any>, isCanEdit?: boolean } }, returnType: void },
	"/page/dialog": { args: { elementUrl: string, config?: { isTemplate?: boolean, wait?: boolean, blockId?: string, force?: boolean, initData?: Record<string, any>, isCanEdit?: boolean } }, returnType: any },
	"/page/slide": { args: { elementUrl: string, config?: { isTemplate?: boolean, wait?: boolean, blockId?: string, force?: boolean, initData?: Record<string, any>, isCanEdit?: boolean } }, returnType: any },
	"/page/notify/toggle": { args: { id: string, visible: boolean }, returnType: void },
	"/page/remove": { args: { item: string | { id: string } }, returnType: void },
	"/update/user": { args: { user: Record<string, any> }, returnType: void },
	"/page/create/sub": { args: { pageId: string, text: string }, returnType: LinkPageItem },
	"/user/basic/sync": { args: { id: string }, returnType: void },
	"/user/onlines": { args: { users: Set<string> }, returnType: void },
	"/user/view/onlines": { args: { viewUrl: string, users: Set<string> }, returnType: void },
	"/robot/open": { args: { robot: RobotInfo }, returnType: Promise<void> },
	"/ws/channel/notify": { args: { id: string, workspaceId: string, roomId: string }, returnType: void },
	"/ws/channel/patch/notify": { args: { workspaceId: string, roomId: string, content: string, file: any, isEdited: boolean }, returnType: void },
	"/ws/channel/deleted/notify": { args: { workspaceId: string, id: string, roomId: string }, returnType: void },
	"/ws/channel/emoji/notify": { args: { workspaceId: string, id: string, roomId: string, emoji: { emojiId: string, code?: string } }, returnType: void },
	"/ws/view/operate/notify": { args: { id: string, directive: number, operators: any[], elementUrl: string, workspaceId: string, userid: string }, returnType: void },
	"/ws/page/item/operate/notify": { args: { id: string, workspaceId: string, roomId: string }, returnType: void },
	"/ws/datagrid/schema/operate/notify": { args: { id: string, workspaceId: string, roomId: string }, returnType: void }
}
