//屏幕自适应宽度
.screen-width {
    margin-left : 10rem;
    margin-right: 10rem;
    display     : block;
}

.screen-content-1200 {
    width : 120rem;
    margin: 0 auto;
}

.screen-content-1000 {
    width : 100rem;
    margin: 0 auto;
}

/**
布局
flex:从左到右，水平居中
flex-end:从右到左，水平居中
flex-center:水平、垂直居中
flex-top:从左到右，上对齐
flex-line:行内flex
flex-full:从左到右，水平与父元素同高
flex-auto:子元素自动填充大小
flex-fixed:固定大小
**/


.flex,
.r-flex>* {
    display        : flex;
    justify-content: flex-start;
    align-items    : center;
    flex-wrap      : nowrap;
}

.flex-left-right,
.flex-round {
    display        : flex;
    justify-content: space-between;
    align-items    : center;
    flex-wrap      : nowrap;
}



.flex-end,
.r-flex-end>* {
    display        : flex;
    justify-content: flex-end;
    align-items    : center;
    flex-wrap      : nowrap;
}

.flex-end-top {
    display        : flex;
    justify-content: flex-end;
    align-items    : flex-start;
    flex-wrap      : nowrap;
}

.flex-top,
.r-flex-top>* {
    display        : flex;
    justify-content: flex-start;
    align-items    : flex-start;
    flex-wrap      : nowrap;
}

.flex-top-end {
    display        : flex;
    justify-content: flex-end;
    align-items    : flex-start;
    flex-wrap      : nowrap;
}


.flex-center,
.r-flex-center>* {
    display        : flex;
    justify-content: center;
    align-items    : center;
    flex-wrap      : nowrap;
}

.flex-full,
.r-flex-full>* {
    display        : flex;
    justify-content: flex-start;
    align-items    : stretch;
    flex-wrap      : nowrap;
}

.flex-center-full,
.r-flex-center-full>* {
    display        : flex;
    justify-content: center;
    align-items    : stretch;
    flex-wrap      : nowrap;
}


.flex-line,
.flex-inline,
.r-flex-line>*,
.r-flex-inline>* {
    display: inline-flex;
}

.flex-wrap,
.r-flex-wrap>* {
    flex-wrap: wrap;
}

.flex-no-wrap,
.r-flex-no-wrap>* {
    flex-wrap: nowrap;
}



.flex-column,
.flex-col,
.r-flex-col>* {
    flex-direction: column;
}


.flex-auto,
.r-flex-auto>* {
    flex-grow  : 1;
    flex-shrink: 1;
}

.flex-fixed,
.r-flex-fixed>* {
    flex-grow  : 0;
    flex-shrink: 0;
}






/**
position的布局
.pos-inset: 适配父元素
.pos-center:水平垂直居中
.pos-center-l:右对齐，水平垂直居中
.pos-full: 宽度、高度与屏幕大小一致
.fixed: fixed定位模式
.fixed-full: fixed与屏幕大小一致
.relative: 
**/
.pos {
    position: absolute;
}


.pos-inset,
.pos-all {
    position: absolute;
    top     : 0rem;
    left    : 0rem;
    right   : 0rem;
    bottom  : 0rem;
}

.pos-center {
    position : absolute;
    top      : 50%;
    left     : 50%;
    transform: translate(-50%, -50%);
}

.pos-center-right {
    position : absolute;
    top      : 50%;
    right    : 0rem;
    transform: translate(0%, -50%);
}

.pos-center-right-outside {
    position : absolute;
    top      : 50%;
    right    : 0rem;
    transform: translate(100%, -50%);
}

.pos-center-left {
    position : absolute;
    top      : 50%;
    left     : 0rem;
    transform: translate(0%, -50%);
}

.pos-center-top {
    position : absolute;
    left     : 50%;
    top      : 0rem;
    transform: translate(-50%, 0rem);
}

.pos-top-right,
.pos-t-r {
    position: absolute;
    top     : 0rem;
    right   : 0rem;
}

.pos-top-left,
.pos-t-l {
    position: absolute;
    top     : 0rem;
    left    : 0rem;
}

.pos-top,
.pos-t {
    top     : 0rem;
    position: absolute;
}

.pos-top-full,
.pos-t-f {
    top     : 0rem;
    position: absolute;
    left    : 0rem;
    right   : 0rem;
}

.pos-right-full,
.pos-r-f {
    top     : 0rem;
    position: absolute;
    bottom  : 0rem;
    right   : 0rem;
}

.pos-left-full,
.pos-l-f {
    top     : 0rem;
    position: absolute;
    bottom  : 0rem;
    left    : 0rem;
}

.pos-left,
.pos-l {
    left    : 0rem;
    position: absolute;
}

.pos-right,
.pos-r {
    right   : 0rem;
    position: absolute;
}

.pos-bottom,
.pos-b {
    bottom  : 0rem;
    position: absolute;
}

.pos-bottom-full,
.pos-b-f {
    bottom  : 0rem;
    position: absolute;
    left    : 0rem;
    right   : 0rem;
}

.pos-full {
    position: absolute;
    top     : 0rem;
    left    : 0rem;
    width   : 100vw;
    height  : 100vh;
    overflow: hidden;
}

.fixed,
.fix {
    position: fixed;
}

.pos-fix,
.pos-fixed {
    position: fixed !important;
}

.fixed-full {
    position: fixed;
    top     : 0rem;
    left    : 0rem;
    width   : 100vw;
    height  : 100vh;
    overflow: hidden;
}

.relative {
    position: relative;
}

.sticky {
    position: sticky;
}


/**
分列布局
中间有空隙，左右两边无空隙
.col-2 2栏间隔10
.col-2-20 2栏间隔20
.col-3 3栏间隔10
.col-3-20 3栏间隔20
.col-4 4栏间隔10
.col-4-20 4栏间隔20
.col-full 列不换行且等高
***/

@cols: 2, 3, 4;

each(@cols, {
        .col-@{value}, .col-@{value}-c5 {
            display        : flex;
            justify-content: flex-start;
            flex-wrap      : wrap;

            >* {
                width       : calc((100/@value+0%) - 0.5rem);
                margin-right: 0.5rem;

                &:last-child {
                    margin-right: 0rem;
                }
            }
        }

        .col-@{value}-c10 {
            display        : flex;
            justify-content: flex-start;
            flex-wrap      : wrap;

            >* {
                width       : calc((100/@value+0%) - 1rem);
                margin-right: 1rem;

                &:last-child {
                    margin-right:1rem;
                }
            }
        }

        .col-@{value}-c20 {
            display        : flex;
            justify-content: flex-start;
            flex-wrap      : wrap;

            >* {
                width       : calc((100/@value+0%) - 2rem);
                margin-right: 2rem;

                &:last-child {
                    margin-right:2rem;
                }
            }
        }


        .col-@{value}-c30 {
            display        : flex;
            justify-content: flex-start;
            flex-wrap      : wrap;

            >* {
                width       : calc((100/@value+0%) - 3rem);
                margin-right: 3rem;

                &:last-child {
                    margin-right:3rem;
                }
            }
        }

        .col-@{value}-c40 {
            display        : flex;
            justify-content: flex-start;
            flex-wrap      : wrap;

            >* {
                width       : calc((100/@value+0%) - 4rem);
                margin-right: 4rem;

                &:last-child {
                    margin-right:4rem;
                }
            }
        }
    }

) .col-full {
    align-items: stretch;
    flex-wrap  : nowrap;
}

/**
多个子元素的间距是10rem
***/
.space {
    display        : inline-flex;
    justify-content: flex-start;
    align-items    : center;

    >* {
        margin-right: 1rem;

        &:last-child {
            margin-right: 0rem;
        }
    }
}


/***
卡片
***/
.card {
    box-sizing   : border-box;
    padding      : 1.5rem;
    border-radius: 1.6rem;
    background   : white;
    box-shadow   : rgba(15, 15, 15, 0.05) 0rem 0rem 0rem 1px, rgba(15, 15, 15, 0.1) 0rem 3px 6px, rgba(15, 15, 15, 0.2) 0rem 9px 24px;
}

.card-menu {
    width              : 22rem;
    box-sizing         : border-box;
    padding            : 1rem 0rem;
    border-radius      : 1.6rem;
    background         : white;
    box-shadow         : rgba(15, 15, 15, 0.05) 0rem 0rem 0rem 1px, rgba(15, 15, 15, 0.1) 0rem 3px 6px, rgba(15, 15, 15, 0.2) 0rem 9px 24px;
    max-height         : 80vh;
    overflow-y         : auto;
    overscroll-behavior: contain;
}

/**
鼠标移上去的hover效果
item-hover:行移去的效果
item-hover-focus:行处于的效果（由js判定)
item-hover-light:行移去的效果
item-hover-light-focus:行处于的效果，偏轻
item-selected:选中的效果
***/

.item-hover,
.r-item-hover>* {
    &:hover {
        background-color: rgba(55, 53, 47, 0.08);
    }
}

.no-item-hover {
    &:hover {
        background-color: transparent !important;
    }
}

.item-color-hover {
    &:hover {
        color           : var(--interactive-hover);
        background-color: rgba(55, 53, 47, 0.08);
    }
}



.item-hover-shadow,
.r-item-hover-shadow>* {
    &:hover {
        box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.6)
    }
}

.item-hover-border,
.r-item-hover-border>* {
    border: 0.1rem solid transparent;

    &:hover {
        border: 0.1rem solid rgba(55, 53, 47, 0.16);
    }
}

.item-hover-1 {
    &:hover {
        color           : var(--interactive-hover);
        background-color: var(--background-modifier-selected);
    }
}


.item-hover-focus,
.r-item-hover-focus>* {
    background-color: rgba(55, 53, 47, 0.1);
}

.item-hover-light,
.item-light-hover,
.r-item-hover-light>*,
.r-item-light-hover>* {
    &:hover {
        background-color: rgba(55, 53, 47, 0.06);
    }
}

.item-hover-light-focus,
.item-light-hover-focus,
.r-item-hover-light-focus>*,
.r-item-light-hover-focus>* {
    background-color: rgba(55, 53, 47, 0.06);
}

.item-selected {
    background-color: rgba(55, 53, 47, 0.08);
}

.item-hover-primary,
.item-hover-p,
.r-item-hover-primary>*,
.r-item-hover-p>* {
    &:hover {
        background-color: rgb(225, 98, 89);
    }
}

.shadow-hover {
    &:hover {
        z-index   : 2;
        box-shadow: 0 20px 16px 0 hsla(0, 0%, 70.2%, .2);
    }
}

.bg-hover,
.item-bg-hover,
.r-bg-hover>*,
.r-item-bg-hover>* {
    background-color: #fff;

    &:hover {
        background-color: #eee;
    }
}

.bg-hover-light,
.item-bg-hover-light,
.r-bg-hover-light>*,
.r-item-bg-hover-light>* {
    background-color: #fff;

    &:hover {
        background-color: #fefefe;
    }
}

.item-hover-button,
.r-item-hover-button>* {
    box-shadow: var(--shadow-s);
    background: #fff;
    display   : inline-flex;

    &:hover {
        background-color: rgb(116, 182, 219);
        color           : #fff;
    }
}

.border-bg-hover,
.item-border-bg-hover,
.r-border-bg-hover>*,
.r-item-border-bg-hover>* {
    background-color: #fff;
    border          : 0.1rem solid transparent;

    &:hover {
        border          : 0.1rem solid rgba(55, 53, 47, 0.16);
        background-color: #eee;
    }
}

.bg-error {
    background-color: fade(rgb(225, 98, 89), 30%);
}

.no-bg {
    background: transparent !important;
}

/**
文本显示
字的大小、精细
***/
.h1 {
    margin-top   : 0rem;
    margin-bottom: 1.5rem;
    color        : rgba(55, 53, 47);
    font-weight  : 600;
    font-size    : 3rem;
    line-height  : 1.35;
}

.h2 {
    margin-top   : 0rem;
    margin-bottom: 1.2rem;
    color        : rgba(55, 53, 47);
    font-weight  : 600;
    font-size    : 2.4rem;
    line-height  : 1.35;
}

.h3 {
    margin-top   : 0rem;
    margin-bottom: 1rem;
    color        : rgba(55, 53, 47);
    font-weight  : 600;
    font-size    : 2rem;
    line-height  : 1.4;
}

.h4 {
    margin-bottom: 0.8rem;
    color        : rgba(55, 53, 47);
    font-weight  : 600;
    font-size    : 1.6rem;
    line-height  : 1.5;
}

.bold,
.bold-700,
.b-700 {
    font-weight: bold;
}

.bold-500,
.b-500 {
    font-weight: 500;
}

.bold-600,
.b-600 {
    font-weight: 600;
}

.underline {
    text-decoration: underline;
}

.underline-hover {
    &:hover {
        text-decoration: underline;
    }
}

.no-underline {
    text-decoration: none !important;
}

.del {
    text-decoration: line-through;
}

.remark {
    color: rgba(55, 53, 47, 0.5);
}

.placeholder-remark,
.input-placeholder-remark,
.p-remark {
    &::placeholder {
        color: rgba(55, 53, 47, 0.5) !important;
    }
}

.remark-important,
.remark-im {
    color: rgba(55, 53, 47, 0.5) !important;
}

.text-white {
    color: #fff;
}

.text-primary,
.text-p {
    color: var(--text-p-color);
}

.text-hover {
    &:hover {
        color: rgb(33, 33, 33);
    }
}

.text-p-hover {
    &:hover {
        color: var(--text-p-color);
    }
}

.fill-p {
    svg {

        path,
        rect,
        circle {
            fill: var(--text-p-color) !important;
        }
    }
}

.text-black {
    color: #000;
}

body {
    --text-color   : rgba(55, 53, 47);
    --text-p-color : rgb(225, 98, 89);
    --text-p1-color: #64a1df;
    --text-b-color : rgb(100, 161, 223);
    --text-g-color : rgb(33, 175, 90);
    --shadow       : rgba(15, 15, 15, 0.05) 0rem 0rem 0rem 1px, rgba(15, 15, 15, 0.1) 0rem 3px 6px, rgba(15, 15, 15, 0.2) 0rem 9px 24px;
    --shadow-light : rgba(15, 15, 15, 0.05) 0px 0px 0px 1px, rgba(15, 15, 15, 0.1) 0px 3px 6px, rgba(15, 15, 15, 0.2) 0px 9px 24px;
    --shadow-s     : 0px 2px 8px rgba(25, 25, 26, .12), 0px 0px 1px rgba(25, 25, 26, .08);
}

.text {
    color   : var(--text-color);
    // fill : currentColor;
}

.text-1 {
    color: rgba(55, 53, 47, 0.8);
}

.text-0 {
    color: transparent;
}

.link,
.text-link,
.text-l {
    color: var(--text-b-color);
}

.link-red {
    color: var(--text-p-color);
}

.link-remark {
    color: rgba(55, 53, 47, 0.5) !important;
}

.link-hover {
    &:hover {
        color: var(--text-b-color);
    }
}

.green {
    color: var(--text-g-color);
    fill : var(--text-g-color);
}

.bg-green {
    background-color: var(--text-g-color);
}

.code {
    display      : inline-block;
    margin       : 0 0.1rem;
    padding      : 0.2rem 0.4rem;
    background   : #f2f4f5;
    border       : 0.1rem solid rgba(0, 0, 0, .06);
    border-radius: 0.3rem
}

.code-block {
    display      : block;
    margin       : 0 0.1rem;
    padding      : 2rem;
    background   : #f2f4f5;
    border       : 0.1rem solid rgba(0, 0, 0, .06);
    border-radius: 0.8rem;
}

.pre {
    white-space: pre-wrap;
}

.error {
    color: #ff4d4f;
}

.error-bg {
    background-color: #ff4d4f;
    color           : #fff;
}


/**
可见性
**/
.visible {
    visibility: visible;
}

.visible-hover {
    .visible {
        visibility: hidden;
    }

    &:hover {
        .visible {
            visibility: visible;
        }

        .visible-hover {
            .visible {
                visibility: hidden;
            }

            &:hover {
                .visible {
                    visibility: visible;
                }
            }
        }
    }


}

.hide,
.hidden {
    visibility: hidden;
}

.none {
    display: none;
}

.none-hover {
    .none {
        display: none;
    }

    &:hover {
        .none {
            display: inline-block;
        }
    }

    .none-block {
        display: none;
    }

    &:hover {
        .none-block {
            display: block;
        }
    }

    .none-flex {
        display: none;
    }

    &:hover {
        .none-flex {
            display: flex;
        }
    }

    .none-inline-flex {
        display: none;
    }

    &:hover {
        .none-inline-flex {
            display: inline-flex;
        }
    }
}

/**
用于单行文本溢出显示省略号
**/
.text-over,
.text-overflow {
    white-space  : nowrap;
    text-overflow: ellipsis;
    overflow     : hidden;
}

/**
用于多行文本溢出显示省略号
**/
.text-overflow-wrap,
.text-over-wrap {
    // white-space  : pre-wrap;
    text-overflow: ellipsis;
    overflow     : hidden;
}

.text-rows-2,
.rows-2 {
    display           : -webkit-box;
    line-clamp        : 2;
    -webkit-line-clamp: 2;
    box-orient        : vertical;
    -webkit-box-orient: vertical;
    line-height       : 20px;
    max-height        : 40px;
    overflow          : hidden;
}

.text-rows-3,
.rows-3 {
    display           : -webkit-box;
    line-clamp        : 3;
    -webkit-line-clamp: 3;
    box-orient        : vertical;
    -webkit-box-orient: vertical;
    line-height       : 20px;
    max-height        : 60px;
    overflow          : hidden;
}

.text-rows-4,
.rows-4 {
    display           : -webkit-box;
    line-clamp        : 4;
    -webkit-line-clamp: 4;
    box-orient        : vertical;
    -webkit-box-orient: vertical;
    line-height       : 20px;
    max-height        : 80px;
    overflow          : hidden;
}

.text-rows-5,
.rows-5 {
    display           : -webkit-box;
    line-clamp        : 5;
    -webkit-line-clamp: 5;
    box-orient        : vertical;
    -webkit-box-orient: vertical;
    line-height       : 20px;
    max-height        : 100px;
    overflow          : hidden;
}

/***
图片显示
定宽居中显示
***/
.object-cover,
.object-center,
.obj-center {
    object-fit     : cover;
    object-position: center center;
}

.overflow {
    overflow: auto;
}

.overflow-hidden,
.overflow-none {
    overflow: hidden;
}

.overflow-y {
    overflow-y: auto;
}

.overlay-y {
    overflow-y: overlay;
}

.overscroll-contain {
    overscroll-behavior: contain;
}

/**
cursor鼠标
**/
.r-cursor {
    >* {
        cursor: pointer;
    }
}

.cursor {
    cursor: pointer;
}

.cursor-col {
    cursor: col-resize;
}

.cursor-row {
    cursor: row-resize;
}

.cursor-grab {
    cursor: grab;
}

.cursor-text {
    cursor: text;
}

.cursor-help {
    cursor: help;
}

.cursor-default {
    cursor: default;
}

.cursor-not-allowed {
    cursor: not-allowed;
}

/**
宽度
***/

@selectors: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20, 24, 25, 26, 28, 30, 32, 36, 40, 48, 50, 60, 70, 72, 80, 88, 90, 100, 110, 120, 130, 140, 150, 160, 180, 200, 220, 240, 250, 270, 280, 300, 320, 350, 360, 400, 450, 480, 500, 540, 550, 600, 700, 720, 750, 760, 800, 900, 960, 1000, 1200;

each(@selectors, {
        .w-@{value}, .r-w-@{value}>* {
            width: unit(@value*0.1, rem);
        }

        .top-@{value}, .t-@{value} {
            top: unit(@value*0.1, rem);
        }

        .right-@{value} {
            right: unit(@value*0.1, rem);
        }

        .min-w-@{value}, .r-min-w-@{value}>* {
            min-width: unit(@value*0.1, rem);
        }

        .max-w-@{value}, .r-max-w-@{value}>* {
            max-width: unit(@value*0.1, rem);
        }

        .h-@{value}, .r-h-@{value}>* {
            height:unit(@value*0.1, rem);
        }

        .min-h-@{value}, .r-min-h-@{value}>* {
            min-height:unit(@value*0.1, rem);
        }

        .max-h-@{value}, .r-max-h-@{value}>* {
            max-height: unit(@value*0.1, rem);
        }

        .w-c-@{value} {
            @w   : unit(@value*0.1, rem);
            width:calc(100% - @w);
        }

    }

);


@pers: 10, 20, 25, 30, 33, 35, 40, 50, 60, 65, 70, 75, 80, 90, 100;

each(@pers, {

        .h@{value},
        .r-h@{value}>* {
            height: @value+0%;
        }

        .w@{value},
        .r-w@{value}>* {
            width: @value+0%;
        }

        .w@{value}-c10,
        .r-w@{value}-c10>* {
            width:calc((@value+0%) - 1rem);
        }

        .w@{value}-c20,
        .r-w@{value}-c20>* {
            width:calc((@value+0%) - 2rem);
        }

        .w@{value}-c30,
        .r-w@{value}-c30>* {
            width:calc((@value+0%) - 3rem);
        }

        .max-w@{value},
        .r-max-w@{value}>* {
            max-width: @value+0%;
        }

        .min-w@{value},
        .r-min-w@{value}>* {
            min-width: @value+0%;
        }

        .max-h@{value},
        .r-max-h@{value}>* {
            max-height: @value+0%;
        }

        .min-h@{value},
        .r-min-h@{value}>* {
            min-height: @value+0%;
        }

        .vh@{value},
        .r-vh@{value}>* {
            height:unit(@value, vh);
        }

        .vw@{value},
        .r-vw@{value}>* {
            width: unit(@value, vw);
        }

        .vw@{value}-c10,
        .r-vw@{value}-c10>* {
            width:calc(unit(@value, vw) - 1rem);
        }

        .vw@{value}-c20,
        .r-vw@{value}-c20>* {
            width:calc(unit(@value, vw) - 2rem);
        }

        .vw@{value}-c30,
        .r-vw@{value}-c30>* {
            width:calc(unit(@value, vw) - 3rem);
        }

        .vw@{value}-c40,
        .r-vw@{value}-c40>* {
            width:calc(unit(@value, vw) - 4rem);
        }

        .max-vw@{value},
        .r-max-vw@{value}>* {
            max-width: unit(@value, vw);
        }

        .min-vw@{value},
        .r-min-vw@{value}>* {
            min-width: unit(@value, vw);
        }

        .max-vh@{value},
        .r-max-vh@{value}>* {
            max-height: unit(@value, vh);
        }

        .min-vh@{value},
        .r-min-vh@{value}>* {
            min-height: unit(@value, vh);
        }

    }

);

@ops: 1, 0, 2, 4, 5, 6, 8, 9, 7;

each(@ops, {
        .op-@{value} {
            opacity:@value*0.1;
        }
    }

) .box-border,
.border-box,
.r-border-box>* {
    box-sizing: border-box;
}

.box-content,
.r-box-content>* {
    box-sizing: content-box;
}

.block {
    display: block;
}

.line,
.inline {
    display: inline;
}

.line-block,
.inline-block {
    display: inline-block;
}

.inline-flex,
.line-flex {
    display: inline-flex;
}

/***
列表
***/
.list-none {
    list-style: none;
}

.list-circle {
    list-style: circle;
}

.list-decimal {
    list-style: decimal;
}

.list-disc {
    list-style: disc;
}

.list-inside {
    list-style-position: inside;
}

.list-outside {
    list-style-position: outside;
}

.pointer-events-none {
    pointer-events: none;
}

.pointer-events-auto {
    pointer-events: auto;
}

.select-none,
.user-none {
    user-select: none;
}

.select-text {
    user-select: text;
}

.stroke-0 {
    stroke-width: 0;
}

.stroke-1 {
    stroke-width: 1;
}

.stroke-2 {
    stroke-width: 2;
}

.resize-none {
    resize: none;
}

.resize-y {
    resize: vertical;
}

.resize-x {
    resize: horizontal;
}

.resize {
    resize: both;
}



.outline-none {
    outline       : 0.2rem solid transparent;
    outline-offset: 0.2rem;
}

.table-auto {
    table-layout: auto;
}

.table-fixed {
    table-layout: fixed;
}

.text-left {
    text-align: left;
}

.text-center {
    text-align: center;
}

.text-right {
    text-align: right;
}


.ts-none {
    transition-property: none;
}

.ts-all {
    transition-property       : all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration       : 150ms;
}

.ts {
    transition-property       : background-color, border-color, color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration       : 150ms;
}

.ts-colors {
    transition-property       : background-color, border-color, color, fill, stroke;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration       : 150ms;
}

.ts-op {
    transition-property       : opacity;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration       : 150ms;
}

.ts-shadow {
    transition-property       : box-shadow;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration       : 150ms;
}

.ts-transform {
    transition-property       : transform;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration       : 150ms;
}


.animate-none {
    animation: none;
}

.animate-spin {
    animation: animate-spin 1s linear infinite;
}

@keyframes animate-spin {
    from {
        transform: rotate(0deg);
    }

    to {
        transform: rotate(360deg);
    }
}

.animate-ping {
    animation: animate-ping 1s cubic-bezier(0, 0, 0.2, 1) infinite;
}

@keyframes animate-ping {

    75%,
    100% {
        transform: scale(2);
        opacity  : 0;
    }
}

.animate-pulse {
    animation: animate-pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

@keyframes animate-pulse {

    0%,
    100% {
        opacity: 1;
    }

    50% {
        opacity: .5;
    }
}

.animate-bounce {
    animation: animate-bounce 1s infinite;
}

@keyframes animate-bounce {

    0%,
    100% {
        transform                : translateY(-25%);
        animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
    }

    50% {
        transform                : translateY(0);
        animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
    }
}



.bg-white,
.white,
.r-white>*,
.r-bg-white>* {
    background-color: #fff;
}

.bg-black,
.r-bg-black>* {
    background-color: #000;
}

.bg-dark,
.r-bg-dark>* {
    background-color: rgba(0, 0, 0, .6)
}

.bg-dark-1,
.r-bg-dark-1>* {
    background-color: rgba(0, 0, 0, .3)
}

.bg-primary,
.bg-p,
.r-bg-primary>*,
.r-bg-p>* {
    background-color: rgb(225, 98, 89)
}

.bg-p-light {
    background-color: rgba(225, 98, 89, 0.2)
}

.bg-primary-hover,
.bg-p-hover,
.r-bg-primary-hover>*,
.r-bg-p-hover>* {
    &:hover {
        background-color: #B84C4E;
    }
}

.bg-primary-1,
.bg-p-1,
.r-bg-p-1>*,
.r-bg-primary-1>* {
    background-color: #64a1df;
}

.bg-primary-1-hover,
.bg-p-1-hover,
.r-bg-p-1-hover>*,
.r-bg-primary-1-hover>* {
    &:hover {
        background-color: darken(#64a1df, 20%);
    }
}

.bg-0,
.r-bg-0>* {
    background-color: transparent;
}

.fill-primary,
.fill-p {
    fill : rgb(225, 98, 89);
    color: rgb(225, 98, 89);

    svg path,
    &svg path {
        fill  : rgb(225, 98, 89);
        color : rgb(225, 98, 89);
        stroke: rgb(225, 98, 89);
    }
}

.fill-primary-1,
.fill-p-1 {
    fill : #64a1df;
    color: #64a1df;

    svg path,
    &svg path {
        fill  : #64a1df;
        color : #64a1df;
        stroke: #64a1df;
    }
}

.bg {
    background-color: rgba(55, 53, 47, 0.08) !important;
}

.bg-light {
    background-color: rgba(55, 53, 47, 0.04) !important;
}

.shadow,
.r-shadow>* {
    //box-shadow: rgba(15, 15, 15, 0.016) 0rem 0rem 0rem 1px, rgba(15, 15, 15, 0.03) 0rem 3px 6px, rgba(15, 15, 15, 0.06) 0rem 9px 24px;
    box-shadow: var(--shadow);
}

.shadow-light,
.r-shadow-light>* {
    box-shadow: var(--shadow-light)
}

.shadow-s,
.r-shadow-s>* {
    box-shadow: var(--shadow-s)
}

.border {
    border: 0.1rem solid rgba(55, 53, 47, 0.16);
}

.border-red {
    border: 0.1rem solid var(--text-p-color);
}

.dashed {
    border: 0.1rem dashed rgba(55, 53, 47, 0.16);
}

.r-border {
    >* {
        border: 0.1rem solid rgba(55, 53, 47, 0.16);
    }
}

.border-left {
    border-left: 0.1rem solid rgba(55, 53, 47, 0.16);
}

.border-right {
    border-right: 0.1rem solid rgba(55, 53, 47, 0.16);
}



.border-primary,
.border-p {
    border: 0.1rem solid rgb(225, 98, 89);
}

.border-bottom,
.border-b {
    border-bottom: 0.1rem solid rgba(55, 53, 47, 0.16);
}

.border-top,
.border-t {
    border-top: 0.1rem solid rgba(55, 53, 47, 0.16);
}

.r-border-bottom,
.r-border-b {
    >* {
        border-bottom: 0.1rem solid rgba(55, 53, 47, 0.16);
    }
}

.border-bottom-primary,
.border-b-p {
    border-bottom: 0.1rem solid rgb(225, 98, 89);
}

.r-border-bottom-primary,
.r-border-b-p {
    >* {
        border-bottom: 0.1rem solid rgb(225, 98, 89);
    }
}

.border-light {
    border: 0.1rem solid rgba(55, 53, 47, 0.08);
}

.r-border-light {
    >* {
        border: 0.1rem solid rgba(55, 53, 47, 0.08);
    }
}

.border-light-bottom,
.border-light-b,
.border-bottom-light {
    border-bottom: 0.1rem solid rgba(55, 53, 47, 0.08);
}

.border-light-top,
.border-light-t,
.border-top-light {
    border-top: 0.1rem solid rgba(55, 53, 47, 0.08);
}

.border-light-right,
.border-right-light {
    border-right: 0.1rem solid rgba(55, 53, 47, 0.08);
}

.border-light-left,
.border-left-light {
    border-left: 0.1rem solid rgba(55, 53, 47, 0.08);
}

.border-t {
    border: 0.1rem solid transparent;
}

.no-border,
.noborder {
    border: none;
}


.break-normal {
    overflow-wrap: normal;
    word-break   : normal;
}

.break-words {
    overflow-wrap: break-word;
}

.break-all {
    word-break: break-all;
}

.g-1 {
    background-image: linear-gradient(to right, #ecfdf5, #ecfdf5);
}

.g-2 {
    background-image: linear-gradient(to right, #fff1f2, #ffe4e6);
}

.text-indent {
    text-indent: 1rem;
}

.uppercase {
    text-transform: uppercase;
}

.lowercase {
    text-transform: lowercase;
}


/**
大小
size-24:图标大小
**/

@sizes: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 42, 45, 46, 48, 50, 55, 60, 64, 65, 68, 70, 72, 80, 90, 96, 100, 120, 140, 150, 160, 180, 200, 240, 250, 300, 0;

each(@sizes, {
        .r-size-@{value} {
            >* {
                width  :unit(@value*0.1, rem);
                height :unit(@value*0.1, rem);
            }
        }

        .size-@{value} {
            width  :unit(@value*0.1, rem);
            height :unit(@value*0.1, rem);
        }

        .f-@{value} {
            font-size:unit(@value*0.1, rem);
        }

        .l-@{value} {
            line-height:unit(@value*0.1, rem);
        }


        .r-padding-@{value} {
            >* {
                padding-top   :unit(@value*0.1, rem);
                padding-left  :unit(@value*0.1, rem);
                padding-bottom:unit(@value*0.1, rem);
                padding-right :unit(@value*0.1, rem);
            }
        }

        .r-padding-w-@{value} {
            >* {
                padding-left :unit(@value*0.1, rem);
                padding-right:unit(@value*0.1, rem);
            }
        }

        .r-padding-h-@{value} {
            >* {
                padding-top   :unit(@value*0.1, rem);
                padding-bottom:unit(@value*0.1, rem);
            }
        }

        .r-padding-t-@{value} {
            >* {
                padding-top:unit(@value*0.1, rem);
            }
        }

        .r-padding-l-@{value} {
            >* {
                padding-left:unit(@value*0.1, rem);
            }
        }

        .r-padding-r-@{value} {
            >* {
                padding-right:unit(@value*0.1, rem);
            }
        }

        .r-padding-b-@{value} {
            >* {
                padding-bottom:unit(@value*0.1, rem);
            }
        }


        .padding-@{value} {
            padding-top   :unit(@value*0.1, rem);
            padding-left  :unit(@value*0.1, rem);
            padding-bottom:unit(@value*0.1, rem);
            padding-right :unit(@value*0.1, rem);
        }

        .padding-w-@{value} {
            padding-left :unit(@value*0.1, rem);
            padding-right:unit(@value*0.1, rem);
        }

        .padding-h-@{value} {
            padding-top   :unit(@value*0.1, rem);
            padding-bottom:unit(@value*0.1, rem);
        }

        .padding-t-@{value} {
            padding-top:unit(@value*0.1, rem);
        }

        .padding-l-@{value} {
            padding-left:unit(@value*0.1, rem);
        }

        .padding-r-@{value} {
            padding-right:unit(@value*0.1, rem);
        }

        .padding-b-@{value} {
            padding-bottom:unit(@value*0.1, rem);
        }

        .r-gap-@{value} {
            >* {
                margin-top   :unit(@value*0.1, rem);
                margin-left  :unit(@value*0.1, rem);
                margin-bottom:unit(@value*0.1, rem);
                margin-right :unit(@value*0.1, rem);
            }
        }

        .r-gap-w-@{value} {
            >* {
                margin-left :unit(@value*0.1, rem);
                margin-right:unit(@value*0.1, rem);
            }
        }

        .r-gap-h-@{value} {
            >* {
                margin-top   :unit(@value*0.1, rem);
                margin-bottom:unit(@value*0.1, rem);
            }

        }

        .r-gap-t-@{value} {
            >* {
                margin-top:unit(@value*0.1, rem);
            }

        }

        .r-gap-l-@{value} {
            >* {
                margin-left:unit(@value*0.1, rem);
            }

        }

        .r-gap-r-@{value} {
            >* {
                margin-right:unit(@value*0.1, rem);
            }

        }

        .r-gap-b-@{value} {
            >* {
                margin-bottom:unit(@value*0.1, rem);
            }
        }

        .gap-@{value} {
            margin-top   :unit(@value*0.1, rem);
            margin-left  :unit(@value*0.1, rem);
            margin-bottom:unit(@value*0.1, rem);
            margin-right :unit(@value*0.1, rem);
        }

        .gap-w-@{value} {
            margin-left :unit(@value*0.1, rem);
            margin-right:unit(@value*0.1, rem);
        }

        .gap-h-@{value} {
            margin-top   :unit(@value*0.1, rem);
            margin-bottom:unit(@value*0.1, rem);
        }

        .gap-t-@{value} {
            margin-top:unit(@value*0.1, rem);
        }

        .gap-l-@{value} {
            margin-left:unit(@value*0.1, rem);
        }

        .gap-r-@{value} {
            margin-right:unit(@value*0.1, rem);
        }

        .gap-b-@{value} {
            margin-bottom:unit(@value*0.1, rem);
        }

        .pos-t-@{value} {
            top:unit(@value*0.1, rem);
        }

        .pos-l-@{value} {
            left:unit(@value*0.1, rem);
        }

        .pos-r-@{value} {
            right:unit(@value*0.1, rem);
        }

        .pos-b-@{value} {
            bottom:unit(@value*0.1, rem);
        }

        .pos-f-@{value} {
            top   :unit(@value*0.1, rem);
            left  :unit(@value*0.1, rem);
            right :unit(@value*0.1, rem);
            bottom:unit(@value*0.1, rem);
        }

        .r-round-@{value} {
            >* {
                border-radius: unit(@value*0.1, rem);
            }
        }

        .r-round-top-@{value}, .r-round-t-@{value} {
            >* {
                border-top-left-radius : unit(@value*0.1, rem);
                border-top-right-radius: unit(@value*0.1, rem);
            }
        }

        .r-round-bottom-@{value}, .r-round-b-@{value} {
            >* {
                border-bottom-left-radius : unit(@value*0.1, rem);
                border-bottom-right-radius: unit(@value*0.1, rem);
            }
        }

        .r-round-left-@{value}, .r-round-l-@{value} {
            >* {
                border-top-left-radius    :unit(@value*0.1, rem);
                border-bottom-left-radius : unit(@value*0.1, rem);
            }
        }

        .r-round-right-@{value}, .r-round-r-@{value} {
            >* {
                border-top-right-radius   : unit(@value*0.1, rem);
                border-bottom-right-radius: unit(@value*0.1, rem);
            }
        }


        .round-@{value} {
            border-radius:unit(@value*0.1, rem);
        }

        .round-top-@{value}, .round-t-@{value} {
            border-top-left-radius : unit(@value*0.1, rem);
            border-top-right-radius: unit(@value*0.1, rem);
        }

        .round-bottom-@{value}, .round-b-@{value} {
            border-bottom-left-radius :unit(@value*0.1, rem);
            border-bottom-right-radius: unit(@value*0.1, rem);
        }

        .round-left-@{value}, .round-l-@{value} {
            border-top-left-radius    :unit(@value*0.1, rem);
            border-bottom-left-radius : unit(@value*0.1, rem);
        }

        .round-right-@{value}, .round-r-@{value} {
            border-top-right-radius   :unit(@value*0.1, rem);
            border-bottom-right-radius: unit(@value*0.1, rem);
        }

    }

)

/**
形状
circle:圆
.round:圆角（图标、按钮类）
.round-card:卡片类的圆角，比较大一些
**/
.r-circle {
    >* {
        border-radius: 50%;
    }
}

.circle {
    border-radius: 50%;
}


.rect {
    border-radius: 0%;
}

.round-0 {
    border-radius: 0%;
}

.r-round {
    >* {
        border-radius: 0.4rem;
    }
}

.round {
    border-radius: 0.4rem;
}


.round-top {
    border-radius: 0.4rem 0.4rem 0rem 0rem;
}


.gap-auto {
    margin: 0 auto;
}

/**
z-index
****/
@zs: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 200, 300, 1000, 2000, 3000, 10000, 20000, 50000, 60000;

each(@zs, {
        .z-@{value} {
            z-index:@value;
        }
    }

) .mask {
    background: rgba(15, 15, 15, 0.6);
}

.mask-1 {
    background: rgba(15, 15, 15, 0.1);
}

.width-atuo,
.w-auto {
    width: auto
}

.h-auto,
.height-auto {
    height: auto;
}



.container {
    display: inline-block;
}

.typed-print {
    overflow    : hidden;
    border-right: .15em solid orange;
    white-space : nowrap;
    animation   : typing 1s steps(20, end) forwards;
    font-size   : 1.2rem;
    width       : 0;
}

@keyframes typing {
    0% {
        visibility: visible;
        // width: 0
    }

    75% {
        visibility: hidden;
        // width: 100%
    }
}


.clear-input {
    border : none;
    outline: none;
}


.pv {
    pointer-events: visible;
}

.pn {
    pointer-events: none;
}

.margin-auto {
    margin: 0 auto;
}


.rotate-90,
.angle-90 {
    transform: rotate(90deg);
}

.rotate-90-,
.angle-90- {
    transform: rotate(-90deg);
}

.rotate-180,
.angle-180 {
    transform: rotate(180deg);
}

.rotate-270,
.angle-270 {
    transform: rotate(270deg);
}

.rotate-0,
.angle-0 {
    transform: rotate(0deg);
}

.hover-toggle {
    >*:first-child {
        display: none;
    }

    >*:last-child {
        display: flex;
    }

    &:hover {
        >*:first-child {
            display: flex;
        }

        >*:last-child {
            display: none;
        }
    }
}

/*
（PNG透明背景的灰白网格效果）
**/
.checkerboard {
    background: conic-gradient(#eee 25%, white 0deg 50%, #eee 0deg 75%, white 0deg) 0 / 20px 20px;
}

.desk-drag {
    -webkit-app-region: drag;
}

.desk-no-drag {
    -webkit-app-region: no-drag;
}

.checkbox {
    appearance      : none;
    margin          : 0px;
    background-color: rgb(255, 255, 255);
    border          : 1px solid rgb(222, 226, 230);
    color           : rgb(0, 0, 0);
    border-radius   : 0.4rem;
    width           : 1.6rem;
    height          : 1.6rem;
    cursor          : pointer;

    &:focus {
        // border-color: #86b7fe;
        border-color   : var(--text-p-color);
        // opacity     : 0.7;
        outline        : 0;
        box-shadow     : 0 0 0 0.25rem rgba(225, 98, 89, .25);
    }

    &:checked {
        // background-color: #0d6efd;
        // border-color    : #0d6efd;
        background-color: var(--text-p-color);
        border-color    : var(--text-p-color);
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3e%3cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='m6 10 3 3 6-6'/%3e%3c/svg%3e")
    }
}